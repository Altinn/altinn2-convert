//----------------------
// <auto-generated>
//     Generated using the NJsonSchema v10.5.2.0 (Newtonsoft.Json v12.0.0.0) (http://NJsonSchema.org)
// </auto-generated>
//----------------------

#nullable enable

namespace Altinn2Convert.Models.Altinn3.widget
{
    #pragma warning disable // Disable all warnings

    /// <summary>Contains data describing the components that are part of the widget</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Components : System.Collections.ObjectModel.Collection<Component>
    {
    
    }
    
    /// <summary>Contains an array of text resources that are associates with the widget. Each item in the array represents one language</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Texts : System.Collections.ObjectModel.Collection<TextResources>
    {
    
    }
    
    /// <summary>A collection of text resources for a given language</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class TextResources 
    {
        [Newtonsoft.Json.JsonProperty("language", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Language Language { get; set; }= default!;
    
        [Newtonsoft.Json.JsonProperty("resources", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public Resources Resources { get; set; } = new Resources();
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>Defines the language for the text resources</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum Language
    {
        [System.Runtime.Serialization.EnumMember(Value = @"nb")]
        Nb = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"nn")]
        Nn = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"en")]
        En = 2,
    
    }
    
    /// <summary>Contains the collection of resource text definitions</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Resources : System.Collections.ObjectModel.Collection<ResourceText>
    {
    
    }
    
    /// <summary>Contains the details of a resource text definition</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class ResourceText 
    {
        /// <summary>The unique ID for the resource text</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Id { get; set; }= default!;
    
        /// <summary>The text value of the resource text</summary>
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Value { get; set; }= default!;
    
        /// <summary>Collection of variables to be used in resource text</summary>
        [Newtonsoft.Json.JsonProperty("variables", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ResourceTextVariable>? Variables { get; set; }= default!;
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>Definition of a variable to be used within a resource text</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class ResourceTextVariable 
    {
        /// <summary>Key specifying which data to use</summary>
        [Newtonsoft.Json.JsonProperty("key", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Key { get; set; }= default!;
    
        /// <summary>Specifies which data source to use. F.ex. dataModel.&lt;name of data model&gt;</summary>
        [Newtonsoft.Json.JsonProperty("dataSource", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string DataSource { get; set; }= default!;
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>Schema that describes the options that can be configured for number formatting on an `input` component, based on react-number-format package. For complete list of available options, see https://github.com/s-yadav/react-number-format#props</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Json : object
    {
        /// <summary>Characters which when pressed result in a decimal separator. When missing, decimalSeparator and '.' are used</summary>
        [Newtonsoft.Json.JsonProperty("allowedDecimalSeparators", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string>? AllowedDecimalSeparators { get; set; }= default!;
    
        /// <summary>Apply formatting to empty inputs</summary>
        [Newtonsoft.Json.JsonProperty("allowEmptyFormatting", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? AllowEmptyFormatting { get; set; } = false;
    
        /// <summary>Allow leading zeros at beginning of number</summary>
        [Newtonsoft.Json.JsonProperty("allowLeadingZeros", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? AllowLeadingZeros { get; set; } = false;
    
        /// <summary>Allow negative numbers (Only when format option is not provided)</summary>
        [Newtonsoft.Json.JsonProperty("allowNegative", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? AllowNegative { get; set; } = true;
    
        /// <summary>If defined it limits to given decimal scale.</summary>
        [Newtonsoft.Json.JsonProperty("decimalScale", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? DecimalScale { get; set; }= default!;
    
        /// <summary>Support decimal point on a number. Single character string.</summary>
        [Newtonsoft.Json.JsonProperty("decimalSeparator", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(1)]
        public string? DecimalSeparator { get; set; } = ".";
    
        /// <summary>Used together with decimalScale. If true it adds 0s to match given decimal scale.</summary>
        [Newtonsoft.Json.JsonProperty("fixedDecimalScale", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? FixedDecimalScale { get; set; } = false;
    
        /// <summary>Format given as hash string, to allow number input in place of hash.</summary>
        [Newtonsoft.Json.JsonProperty("format", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Format { get; set; }= default!;
    
        /// <summary>Mask to show in place of non-entered values</summary>
        [Newtonsoft.Json.JsonProperty("mask", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Mask { get; set; } = " ";
    
        /// <summary>Add a prefix before the number</summary>
        [Newtonsoft.Json.JsonProperty("prefix", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Prefix { get; set; }= default!;
    
        /// <summary>Add a suffix after the number</summary>
        [Newtonsoft.Json.JsonProperty("suffix", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Suffix { get; set; }= default!;
    
        /// <summary>Add thousand separators on number. Single character string or boolean true (true is default to ,)</summary>
        [Newtonsoft.Json.JsonProperty("thousandSeparator", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(1)]
        public bool? ThousandSeparator { get; set; }= default!;
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>Contains data describing the layout configuration.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Data 
    {
        [Newtonsoft.Json.JsonProperty("layout", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Layout? Layout { get; set; }= default!;
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>Array of components to be presented in the layout.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Layout : System.Collections.ObjectModel.Collection<Component>
    {
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Component : object
    {
        /// <summary>The component ID. Must be unique within a given layout.</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^[0-9a-zA-Z][0-9a-zA-Z-]*[0-9a-zA-Z]$")]
        public string Id { get; set; }= default!;
    
        /// <summary>The component type.</summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ComponentType Type { get; set; }= default!;
    
        /// <summary>Boolean value indicating if the component is required when filling in the form. Defaults to false.</summary>
        [Newtonsoft.Json.JsonProperty("required", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Required { get; set; } = false;
    
        /// <summary>Boolean value indicating if the component should be presented as read only. Defaults to false.</summary>
        [Newtonsoft.Json.JsonProperty("readOnly", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? ReadOnly { get; set; } = false;
    
        /// <summary>Text resource bindings for a component.</summary>
        [Newtonsoft.Json.JsonProperty("textResourceBindings", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, string>? TextResourceBindings { get; set; }= default!;
    
        /// <summary>Data model bindings for a component.</summary>
        [Newtonsoft.Json.JsonProperty("dataModelBindings", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, string>? DataModelBindings { get; set; }= default!;
    
        [Newtonsoft.Json.JsonProperty("triggers", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Triggers? Triggers { get; set; }= default!;
    
        /// <summary>A collection of settings for how the component label should be rendered.</summary>
        [Newtonsoft.Json.JsonProperty("labelSettings", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public LabelSettings? LabelSettings { get; set; }= default!;
    
        /// <summary>Settings for the components grid. Used for controlling horizontal alignment.</summary>
        [Newtonsoft.Json.JsonProperty("grid", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GridSettings? Grid { get; set; }= default!;
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class HeaderComponent 
    {
        /// <summary>'L'=&lt;h2&gt;, 'M'=&lt;h3&gt;, 'S'=&lt;h4&gt;</summary>
        [Newtonsoft.Json.JsonProperty("size", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public HeaderComponentSize Size { get; set; }= default!;
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class FileUploadComponent 
    {
        /// <summary>Sets the maximum file size allowed in megabytes.</summary>
        [Newtonsoft.Json.JsonProperty("maxFileSizeInMB", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int MaxFileSizeInMB { get; set; }= default!;
    
        /// <summary>Sets the maximum number of attachments allowed to upload.</summary>
        [Newtonsoft.Json.JsonProperty("maxNumberOfAttachments", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int MaxNumberOfAttachments { get; set; }= default!;
    
        /// <summary>Sets the minimum number of attachments to upload</summary>
        [Newtonsoft.Json.JsonProperty("minNumberOfAttachments", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int MinNumberOfAttachments { get; set; }= default!;
    
        /// <summary>Sets the display mode for the file upload component.</summary>
        [Newtonsoft.Json.JsonProperty("displayMode", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public FileUploadComponentDisplayMode DisplayMode { get; set; }= default!;
    
        /// <summary>Boolean value indicating if the component has valid file endings</summary>
        [Newtonsoft.Json.JsonProperty("hasCustomFileEndings", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? HasCustomFileEndings { get; set; }= default!;
    
        /// <summary>A separated string of valid file endings to upload. If not set all endings are accepted.</summary>
        [Newtonsoft.Json.JsonProperty("validFileEndings", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ValidFileEndings { get; set; }= default!;
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class DatepickerComponent 
    {
        /// <summary>Sets the minimum allowed date. Can also use keyword 'today' to disable all past dates dynamically based on the current date. Defaults to 1900-01-01T12:00:00.000Z.</summary>
        [Newtonsoft.Json.JsonProperty("minDate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? MinDate { get; set; } = "1/1/1900 12:00:00 PM";
    
        /// <summary>Sets the maximum allowed date. Can also use keyword 'today' to disable all future dates dynamically based on the current date. Defaults to 2100-01-01T12:00:00.000Z.</summary>
        [Newtonsoft.Json.JsonProperty("maxDate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? MaxDate { get; set; } = "2100-01-01T12:00:00.000Z.";
    
        /// <summary>Boolean value indicating if the date time should be stored as a timeStamp. Defaults to false.</summary>
        [Newtonsoft.Json.JsonProperty("timeStamp", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? TimeStamp { get; set; } = false;
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class NavigationButtonsComponent 
    {
        /// <summary>Shows two buttons (back/next) instead of just 'next'.</summary>
        [Newtonsoft.Json.JsonProperty("showBackButton", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? ShowBackButton { get; set; }= default!;
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class InstantiationButtonComponent 
    {
        /// <summary>Creates a new app instance with data collected from a stateless part of the app.</summary>
        [Newtonsoft.Json.JsonProperty("mapping", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, string>? Mapping { get; set; }= default!;
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class GridSettings : GridProps
    {
        /// <summary>Optional grid for the component label. Used in combination with innerGrid to align labels on the side.</summary>
        [Newtonsoft.Json.JsonProperty("labelGrid", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GridProps? LabelGrid { get; set; }= default!;
    
        /// <summary>Optional grid for inner component content like input field or dropdown. Used to avoid inner content filling the component width.</summary>
        [Newtonsoft.Json.JsonProperty("innerGrid", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GridProps? InnerGrid { get; set; }= default!;
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class GridProps 
    {
        /// <summary>Grid breakpoint at 0px</summary>
        [Newtonsoft.Json.JsonProperty("xs", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(1, 12)]
        public int Xs { get; set; }= default!;
    
        /// <summary>Grid breakpoint at 600px</summary>
        [Newtonsoft.Json.JsonProperty("sm", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(1, 12)]
        public int Sm { get; set; }= default!;
    
        /// <summary>Grid breakpoint at 960px</summary>
        [Newtonsoft.Json.JsonProperty("md", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(1, 12)]
        public int Md { get; set; }= default!;
    
        /// <summary>Grid breakpoint at 1280px</summary>
        [Newtonsoft.Json.JsonProperty("lg", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(1, 12)]
        public int Lg { get; set; }= default!;
    
        /// <summary>Grid breakpoint at 1920px</summary>
        [Newtonsoft.Json.JsonProperty("xl", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(1, 12)]
        public int Xl { get; set; }= default!;
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class GroupComponent 
    {
        /// <summary>An array of the "id" of child components belonging to the group.</summary>
        [Newtonsoft.Json.JsonProperty("children", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<string> Children { get; set; } = new System.Collections.ObjectModel.Collection<string>();
    
        /// <summary>Alternatives for edit view of repeating group</summary>
        [Newtonsoft.Json.JsonProperty("edit", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GroupEditOptions? Edit { get; set; }= default!;
    
        /// <summary>The maximum number of iterations of a group. Only relevant if group is repeating.</summary>
        [Newtonsoft.Json.JsonProperty("maxCount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int? MaxCount { get; set; }= default!;
    
        /// <summary>An array of the id of child components that should be included as table headers. If not defined all components are shown.</summary>
        [Newtonsoft.Json.JsonProperty("tableHeaders", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string>? TableHeaders { get; set; }= default!;
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class GroupEditOptions 
    {
        /// <summary>Mode for how repeating group table is displayed in edit mode</summary>
        [Newtonsoft.Json.JsonProperty("mode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public GroupEditOptionsMode? Mode { get; set; }= default!;
    
        /// <summary>Conditions for filtering visible items in repeating group</summary>
        [Newtonsoft.Json.JsonProperty("filter", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<GroupFilterItem>? Filter { get; set; }= default!;
    
        /// <summary>Boolean value indicating whether save button should be shown or not in edit mode of repeating group item.</summary>
        [Newtonsoft.Json.JsonProperty("saveButton", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? SaveButton { get; set; }= default!;
    
        /// <summary>Boolean value indicating whether delete button should be shown or not in edit mode of repeating group item.</summary>
        [Newtonsoft.Json.JsonProperty("deleteButton", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? DeleteButton { get; set; }= default!;
    
        /// <summary>Boolean value indicating if form components in edit mode should be shown over multiple pages/views.</summary>
        [Newtonsoft.Json.JsonProperty("multiPage", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? MultiPage { get; set; }= default!;
    
        /// <summary>Boolean value indicating whether add new button should be shown or not under the table.</summary>
        [Newtonsoft.Json.JsonProperty("addButton", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? AddButton { get; set; }= default!;
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class GroupFilterItem 
    {
        /// <summary>Key representing field in data model to check.</summary>
        [Newtonsoft.Json.JsonProperty("key", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Key { get; set; }= default!;
    
        /// <summary>Value to check against.</summary>
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Value { get; set; }= default!;
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Options 
    {
        /// <summary>The option label. Can be plain text or a text resource binding.</summary>
        [Newtonsoft.Json.JsonProperty("label", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Label { get; set; }= default!;
    
        /// <summary>The option value.</summary>
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Value { get; set; }= default!;
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>An array of actions that should be triggered when data connected to this component changes.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Triggers : System.Collections.ObjectModel.Collection<Anonymous>
    {
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class SelectionComponents 
    {
        /// <summary>Reference to connected options by id.</summary>
        [Newtonsoft.Json.JsonProperty("optionsId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? OptionsId { get; set; }= default!;
    
        /// <summary>An array of options. Only relevant if no optionsId is set.</summary>
        [Newtonsoft.Json.JsonProperty("options", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Options>? Options { get; set; }= default!;
    
        /// <summary>Sets a preselected index.</summary>
        [Newtonsoft.Json.JsonProperty("preselectedOptionIndex", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int? PreselectedOptionIndex { get; set; }= default!;
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class AddressComponent 
    {
        /// <summary>Boolean value indicating if the address component should be shown in simple mode.</summary>
        [Newtonsoft.Json.JsonProperty("simplified", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Simplified { get; set; } = false;
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class SummaryComponent 
    {
        /// <summary>String value indicating which layout component (by ID) the summary is for.</summary>
        [Newtonsoft.Json.JsonProperty("componentRef", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ComponentRef { get; set; }= default!;
    
        /// <summary>String value indicating which layout page the referenced component is defined on.</summary>
        [Newtonsoft.Json.JsonProperty("pageRef", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? PageRef { get; set; }= default!;
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class AttachmentListComponent 
    {
        /// <summary>List of data type IDs for the attachment list to show.</summary>
        [Newtonsoft.Json.JsonProperty("dataTypeIds", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string>? DataTypeIds { get; set; }= default!;
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class ImageComponent 
    {
        /// <summary>Set of options for image field.</summary>
        [Newtonsoft.Json.JsonProperty("image", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Image? Image { get; set; }= default!;
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class InputComponent 
    {
        /// <summary>Set of options for formatting input fields.</summary>
        [Newtonsoft.Json.JsonProperty("formatting", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public InputFormatting? Formatting { get; set; }= default!;
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class InputFormatting 
    {
        [Newtonsoft.Json.JsonProperty("number", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Json? Number { get; set; }= default!;
    
        /// <summary>The alignment for Input field (eg. right aligning a series of numbers)</summary>
        [Newtonsoft.Json.JsonProperty("align", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public InputFormattingAlign? Align { get; set; }= default!;
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>Schema that describes the layout configuration for Altinn applications.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Json2 
    {
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Data? Data { get; set; }= default!;
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>Schema that describes a widget for use in Altinn Studio</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Test 
    {
        [Newtonsoft.Json.JsonProperty("components", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public Components Components { get; set; } = new Components();
    
        [Newtonsoft.Json.JsonProperty("displayName", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string DisplayName { get; set; }= default!;
    
        [Newtonsoft.Json.JsonProperty("texts", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Texts? Texts { get; set; }= default!;
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum ComponentType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"AddressComponent")]
        AddressComponent = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"AttachmentList")]
        AttachmentList = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Button")]
        Button = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Checkboxes")]
        Checkboxes = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Datepicker")]
        Datepicker = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Dropdown")]
        Dropdown = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = @"FileUpload")]
        FileUpload = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Group")]
        Group = 7,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Header")]
        Header = 8,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Image")]
        Image = 9,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Input")]
        Input = 10,
    
        [System.Runtime.Serialization.EnumMember(Value = @"InstantiationButton")]
        InstantiationButton = 11,
    
        [System.Runtime.Serialization.EnumMember(Value = @"NavigationButtons")]
        NavigationButtons = 12,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Paragraph")]
        Paragraph = 13,
    
        [System.Runtime.Serialization.EnumMember(Value = @"RadioButtons")]
        RadioButtons = 14,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Summary")]
        Summary = 15,
    
        [System.Runtime.Serialization.EnumMember(Value = @"TextArea")]
        TextArea = 16,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class LabelSettings 
    {
        /// <summary>Controls whether the text that is indicating that a field is optional should be displayed.</summary>
        [Newtonsoft.Json.JsonProperty("optionalIndicator", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? OptionalIndicator { get; set; } = true;
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum HeaderComponentSize
    {
        [System.Runtime.Serialization.EnumMember(Value = @"L")]
        L = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"M")]
        M = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"S")]
        S = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"h2")]
        H2 = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"h3")]
        H3 = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"h4")]
        H4 = 5,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum FileUploadComponentDisplayMode
    {
        [System.Runtime.Serialization.EnumMember(Value = @"simple")]
        Simple = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"list")]
        List = 1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum GroupEditOptionsMode
    {
        [System.Runtime.Serialization.EnumMember(Value = @"hideTable")]
        HideTable = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"showAll")]
        ShowAll = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"showTable")]
        ShowTable = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum Anonymous
    {
        [System.Runtime.Serialization.EnumMember(Value = @"validation")]
        Validation = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"validatePage")]
        ValidatePage = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"validateAllPages")]
        ValidateAllPages = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"calculatePageOrder")]
        CalculatePageOrder = 3,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Image 
    {
        [Newtonsoft.Json.JsonProperty("src", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Src? Src { get; set; }= default!;
    
        [Newtonsoft.Json.JsonProperty("width", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Width { get; set; }= default!;
    
        [Newtonsoft.Json.JsonProperty("align", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ImageAlign? Align { get; set; }= default!;
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum InputFormattingAlign
    {
        [System.Runtime.Serialization.EnumMember(Value = @"left")]
        Left = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"center")]
        Center = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"right")]
        Right = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Src 
    {
        [Newtonsoft.Json.JsonProperty("nb", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Nb { get; set; }= default!;
    
        [Newtonsoft.Json.JsonProperty("nn", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Nn { get; set; }= default!;
    
        [Newtonsoft.Json.JsonProperty("en", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? En { get; set; }= default!;
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum ImageAlign
    {
        [System.Runtime.Serialization.EnumMember(Value = @"flex-start")]
        FlexStart = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"center")]
        Center = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"flex-end")]
        FlexEnd = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"space-between")]
        SpaceBetween = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"space-around")]
        SpaceAround = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"space-evenly")]
        SpaceEvenly = 5,
    
    }
}